#
msgid ""
msgstr ""
"Project-Id-Version: Functional Programming in Lean\n"
"POT-Creation-Date: 2024-04-18T15:02:27+08:00\n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.4.2\n"

#: src/next-steps.md:3
#, fuzzy
msgid ""
"This book introduces the very basics of functional programming in Lean, "
"including a tiny amount of interactive theorem proving. Using dependently-"
"typed functional languages like Lean is a deep topic, and much can be said. "
"Depending on your interests, the following resources might be useful for "
"learning Lean 4."
msgstr ""
"本书介绍了 Lean 中函数式编程的基础知识，包括少量的交互式定理证明。使用像 Lean "
"这样的依值类型函数式语言是一个深入的话题，有很多内容可以讨论。根据您的兴趣，以下资源可能有助于学习 Lean 4。"

#: src/next-steps.md:7
#, fuzzy
msgid "Learning Lean"
msgstr "学习 Lean"

#: src/next-steps.md:9
#, fuzzy
msgid "Lean 4 itself is described in the following resources:"
msgstr "Lean 4 本身在以下资源中进行了描述："

#: src/next-steps.md:11
#, fuzzy
msgid ""
"[Theorem Proving in Lean 4](https://lean-lang.org/theorem_proving_in_lean4/)"
" is a tutorial on writing proofs using Lean."
msgstr ""
"[Lean 4 中的定理证明](https://lean-lang.org/theorem_proving_in_lean4/) 是一个使用 Lean "
"编写证明的教程。"

#: src/next-steps.md:12
#, fuzzy
msgid ""
"[The Lean 4 Manual](https://lean-lang.org/lean4/doc/) provides a reference "
"for the language and its features. At the time of writing, it is still "
"incomplete, but it describes many aspects of Lean in greater detail than "
"this book."
msgstr ""
"[Lean 4 手册](https://lean-lang.org/lean4/doc/) "
"提供了该语言及其特性的参考。在撰写本文时，它仍不完整，但它比本书更详细地描述了 Lean 的许多方面。"

#: src/next-steps.md:13
#, fuzzy
msgid ""
"[How To Prove It With Lean](https://djvelleman.github.io/HTPIwL/) is a Lean-"
"based accompaniment to the well-regarded textbook [_How To Prove "
"It_](https://www.cambridge.org/highereducation/books/how-to-prove-"
"it/6D2965D625C6836CD4A785A2C843B3DA) that provides an introduction to "
"writing paper-and-pencil mathematical proofs."
msgstr ""
"[用 Lean 证明](https://djvelleman.github.io/HTPIwL/) 是备受推崇的教科书 "
"[如何证明](https://www.cambridge.org/highereducation/books/how-to-prove-"
"it/6D2965D625C6836CD4A785A2C843B3DA) 的基于 Lean 的伴随教材，它提供了用纸笔编写数学证明的简介。"

#: src/next-steps.md:14
#, fuzzy
msgid ""
"[Metaprogramming in Lean "
"4](https://github.com/arthurpaulino/lean4-metaprogramming-book) provides an "
"overview of Lean's extension mechanisms, from infix operators and notations "
"to macros, custom tactics, and full-on custom embedded languages."
msgstr ""
"[Lean 4 中的元编程](https://github.com/arthurpaulino/lean4-metaprogramming-book) "
"提供了 Lean 扩展机制的概述，从中缀运算符和符号到宏、自定义策略和完全自定义的嵌入式语言。"

#: src/next-steps.md:15
#, fuzzy
msgid ""
"[Functional Programming in Lean](https://lean-"
"lang.org/functional_programming_in_lean/) may be interesting to readers who "
"enjoy jokes about recursion."
msgstr ""
"[Lean 中的函数式编程](https://lean-lang.org/functional_programming_in_lean/) "
"可能对喜欢递归笑话的读者感兴趣。"

#: src/next-steps.md:17
#, fuzzy
msgid ""
"However, the best way to continue learning Lean is to start reading and "
"writing code, consulting the documentation when you get stuck. Additionally,"
" the [Lean Zulip](https://leanprover.zulipchat.com/) is an excellent place "
"to meet other Lean users, ask for help, and help others."
msgstr ""
"然而，继续学习 Lean 的最佳方法是开始阅读和编写代码，在遇到困难时查阅文档。此外，[Lean "
"Zulip](https://leanprover.zulipchat.com/) 是结识其他 Lean 用户、寻求帮助和帮助他人的绝佳场所。"

#: src/next-steps.md:20
#, fuzzy
msgid "The Standard Library"
msgstr "标准库"

#: src/next-steps.md:22
#, fuzzy
msgid ""
"Out of the box, Lean itself includes a fairly minimal library. Lean is self-"
"hosted, and the included code is just enough to implement Lean itself. For "
"many applications, a larger standard library is needed."
msgstr ""
"开箱即用，Lean 本身包含一个相当小的库。Lean 是自托管的，并且包含的代码仅足以实现 Lean 本身。对于许多应用程序，需要更大的标准库。"

#: src/next-steps.md:26
#, fuzzy
msgid ""
"[std4](https://github.com/leanprover/std4) is an in-progress standard "
"library that includes many data structures, tactics, type class instances, "
"and functions that are out of scope for the Lean compiler itself. To use "
"`std4`, the first step is to find a commit in its history that's compatible "
"with the version of Lean 4 that you're using (that is, one in which the "
"`lean-toolchain` file matches the one in your project). Then, add the "
"following to the top level of your `lakefile.lean`, where `COMMIT_HASH` is "
"the appropriate version:"
msgstr ""
"[std4](https://github.com/leanprover/std4) "
"是一个正在进行中的标准库，其中包含许多数据结构、策略、类型类实例和超出 Lean 编译器本身范围的函数。要使用 "
"`std4`，第一步是找到其历史记录中与你正在使用的 Lean 4 版本兼容的提交（即，其中 `lean-toolchain` "
"文件与你的项目中的文件匹配）。然后，将以下内容添加到 `lakefile.lean` 的顶层，其中 `COMMIT_HASH` 是适当的版本："

#: src/next-steps.md:29
msgid ""
"```lean\n"
"require std from git\n"
"  \"https://github.com/leanprover/std4/\" @ \"COMMIT_HASH\"\n"
"```"
msgstr ""

#: src/next-steps.md:35
#, fuzzy
msgid "Mathematics in Lean"
msgstr "数学在 Lean 中"

#: src/next-steps.md:37
#, fuzzy
msgid ""
"Most resources for mathematicians are written for Lean 3. A wide selection "
"are available at [the community site](https://leanprover-"
"community.github.io/learn.html). To get started doing mathematics in Lean 4,"
" it is probably easiest to participate in the process of porting the "
"mathematics library `mathlib` from Lean 3 to Lean 4. Please see the "
"[`mathlib4` README](https://github.com/leanprover-community/mathlib4) for "
"further information."
msgstr ""
"大多数数学家资源都是为 Lean 3 编写的。[社区网站](https://leanprover-"
"community.github.io/learn.html) 上提供了广泛的选择。要开始在 Lean 4 "
"中进行数学运算，最简单的方法可能是参与将数学库 `mathlib` 从 Lean 3 移植到 Lean 4 的过程。有关更多信息，请参阅 "
"[`mathlib4` 自述文件](https://github.com/leanprover-community/mathlib4)。"

#: src/next-steps.md:42
#, fuzzy
msgid "Using Dependent Types in Computer Science"
msgstr "在计算机科学中使用依值类型"

#: src/next-steps.md:44
#, fuzzy
msgid ""
"Coq is a language that has a lot in common with Lean. For computer "
"scientists, the [Software "
"Foundations](https://softwarefoundations.cis.upenn.edu/) series of "
"interactive textbooks provides an excellent introduction to applications of "
"Coq in computer science. The fundamental ideas of Lean and Coq are very "
"similar, and skills are readily transferable between the systems."
msgstr ""
"Coq 是一种与 Lean "
"有很多共同点的语言。对于计算机科学家来说，[软件基础](https://softwarefoundations.cis.upenn.edu/) "
"系列互动教科书提供了 Coq 在计算机科学中的应用的精彩介绍。Lean 和 Coq 的基本思想非常相似，技能可以在系统之间轻松转移。"

#: src/next-steps.md:50
#, fuzzy
msgid ""
"For programmers who are interested in learning to use indexed families and "
"dependent types to structure programs, Edwin Brady's [_Type Driven "
"Development with Idris_](https://www.manning.com/books/type-driven-"
"development-with-idris) provides an excellent introduction. Like Coq, Idris "
"is a close cousin of Lean, though it lacks tactics."
msgstr ""
"对于有兴趣学习使用索引族和依值类型来构建程序的程序员，埃德温·布雷迪的 [_使用 Idris "
"进行类型驱动开发_](https://www.manning.com/books/type-driven-development-with-idris)"
" 提供了一个精彩的介绍。与 Coq 一样，Idris 是 Lean 的近亲，尽管它缺乏策略。"

#: src/next-steps.md:53
msgid "Understanding Dependent Types"
msgstr ""

#: src/next-steps.md:55
msgid ""
"[_The Little Typer_](https://thelittletyper.com/) is a book for programmers "
"who haven't formally studied logic or the theory of programming languages, "
"but who want to build an understanding of the core ideas of dependent type "
"theory. While all of the above resources aim to be as practical as possible,"
" _The Little Typer_ presents an approach to dependent type theory where the "
"very basics are built up from scratch, using only concepts from programming."
" Disclaimer: the author of _Functional Programming in Lean_ is also an "
"author of _The Little Typer_."
msgstr ""
