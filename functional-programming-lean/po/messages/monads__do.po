#
msgid ""
msgstr ""
"Project-Id-Version: Functional Programming in Lean\n"
"POT-Creation-Date: 2024-04-18T15:02:27+08:00\n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.4.2\n"

#: src/monads/do.md:3
#, fuzzy
msgid ""
"While APIs based on monads are very powerful, the explicit use of `>>=` with"
" anonymous functions is still somewhat noisy. Just as infix operators are "
"used instead of explicit calls to `HAdd.hAdd`, Lean provides a syntax for "
"monads called _`do`\\-notation_ that can make programs that use monads "
"easier to read and write. This is the very same `do`\\-notation that is used"
" to write programs in `IO`, and `IO` is also a monad."
msgstr ""
"基于单子的 API 非常强大，但显式使用 `>>=` 和匿名函数仍然有些繁琐。正如使用中缀运算符代替显式调用 `HAdd.hAdd` 一样，Lean "
"提供了一种称为 _`do`\\-notation_ 的单子语法，它可以使使用单子的程序更易于阅读和编写。这与用于编写 `IO` 程序的 "
"`do`\\-notation 完全相同，而 `IO` 也是一个单子。"

#: src/monads/do.md:7
#, fuzzy
msgid ""
"In [Hello, World!](../hello-world.md), the `do` syntax is used to combine "
"`IO` actions, but the meaning of these programs is explained directly. "
"Understanding how to program with monads means that `do` can now be "
"explained in terms of how it translates into uses of the underlying monad "
"operators."
msgstr ""
"在 [Hello, World!](../hello-world.md) 中，`do` 语法用于组合 `IO` "
"操作，但这些程序的含义是直接解释的。理解如何使用单子进行编程意味着现在可以使用 `do` 来解释它如何转换为对底层单子运算符的使用。"

#: src/monads/do.md:10
#, fuzzy
msgid ""
"The first translation of `do` is used when the only statement in the `do` is"
" a single expression `E`. In this case, the `do` is removed, so"
msgstr "当 `do` 中的唯一语句是单个表达式 `E` 时，使用 `do` 的第一个转换。在这种情况下，`do` 被删除，因此"

#: src/monads/do.md:15 src/monads/do.md:28 src/monads/do.md:43
#: src/monads/do.md:58
#, fuzzy
msgid "translates to"
msgstr "转换为"

#: src/monads/do.md:20
#, fuzzy
msgid ""
"The second translation is used when the first statement of the `do` is a "
"`let` with an arrow, binding a local variable. This translates to a use of "
"`>>=` together with a function that binds that very same variable, so"
msgstr ""
"当 `do` 的第一个语句是带有箭头的 `let`，绑定一个局部变量时，使用第二个转换。这转换为使用 `>>=` 以及绑定同一变量的函数，因此"

#: src/monads/do.md:36
#, fuzzy
msgid ""
"When the first statement of the `do` block is an expression, then it is "
"considered to be a monadic action that returns `Unit`, so the function "
"matches the `Unit` constructor and"
msgstr "当 `do` 块的第一个语句是一个表达式时，它被认为是一个返回 `Unit` 的单子操作，因此该函数匹配 `Unit` 构造函数，因此"

#: src/monads/do.md:51
#, fuzzy
msgid ""
"Finally, when the first statement of the `do` block is a `let` that uses "
"`:=`, the translated form is an ordinary let expression, so"
msgstr "最后，当 `do` 块的第一个语句是使用 `:=` 的 `let` 时，转换后的形式是一个普通的 let 表达式，因此"

#: src/monads/do.md:66
#, fuzzy
msgid ""
"The definition of `firstThirdFifthSeventh` that uses the `Monad` class looks"
" like this:"
msgstr "使用 `Monad` 类的 `firstThirdFifthSeventh` 的定义如下所示："

#: src/monads/do.md:75
#, fuzzy
msgid "Using `do`\\-notation, it becomes significantly more readable:"
msgstr "使用 `do`\\-notation，它变得更加易于阅读："

#: src/monads/do.md:85
#, fuzzy
msgid ""
"Without the `Monad` type class, the function `number` that numbers the nodes"
" of a tree was written:"
msgstr "`Monad` 类型类缺失时，对树的节点进行编号的函数 `number` 编写如下："

#: src/monads/do.md:98
#, fuzzy
msgid "With `Monad` and `do`, its definition is much less noisy:"
msgstr "有了 `Monad` 和 `do`，其定义就简洁多了："

#: src/monads/do.md:113
#, fuzzy
msgid ""
"All of the conveniences from `do` with `IO` are also available when using it"
" with other monads. For example, nested actions also work in any monad. The "
"original definition of `mapM` was:"
msgstr "使用 `do` 与 `IO` 的所有便利性在使用其他单子时也可用。例如，嵌套操作也适用于任何单子。`mapM` 的原始定义为："

#: src/monads/do.md:124
#, fuzzy
msgid "With `do`\\-notation, it can be written:"
msgstr "使用 `do` 符号，可以写成："

#: src/monads/do.md:133
#, fuzzy
msgid ""
"Using nested actions makes it almost as short as the original non-monadic "
"`map`:"
msgstr "使用嵌套操作使其几乎与原始非单子 `map` 一样简洁："

#: src/monads/do.md:140
#, fuzzy
msgid "Using nested actions, `number` can be made much more concise:"
msgstr "使用嵌套操作，`number` 可以变得更加简洁："

#: src/monads/do.md:159
#, fuzzy
msgid ""
"Rewrite `evaluateM`, its helpers, and the different specific use cases using"
" `do`\\-notation instead of explicit calls to `>>=`."
msgstr "使用 `do` 符号而不是显式调用 `>>=` 重写 `evaluateM`、其帮助器和不同的特定用例。"

#: src/monads/do.md:160
#, fuzzy
msgid "Rewrite `firstThirdFifthSeventh` using nested actions."
msgstr "使用嵌套操作重写 `firstThirdFifthSeventh`。"
